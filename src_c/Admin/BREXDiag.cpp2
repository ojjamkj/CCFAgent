#include    <stdio.h>
  #include    <stdlib.h>
  #include    <string.h>
  #include    <time.h>
  #ifndef WIN32
  #include    <unistd.h>
#endif
#include    "MTUtil.h"
#include    "MRCSComm.h"
#include    "BREXLog.h"
#include	"MRGBLVAR.h"
#include    "BREXDiag.h"
CBREXDiag *g_pCBREXDiag;
int g_Called;
/**************************************************************************************************/
int ConnectLoadDatabase(char *msg);
void DisConnectLoadDatabase();
void DB_Lock();
void DB_Unlock();
CBREXDiag::CBREXDiag() :
		CBREXThreadrun(), CBREXThread(101) {
	if (Start(this)) {
		char lpsz[256];
		sprintf(lpsz, "Diagnose thread start failure.\n");
		throw new CMTException(SYSERR_THREADSTARTFAILURE, lpsz);
	}
}
CBREXDiag::~CBREXDiag() {
	Terminate();
	printf("Terminate CBREXDiag\n");
}
void CBREXDiag::Run(void) {
	int nLoop = 0;
	try {
		while (1) {
			//  Sleep  5 Sec 
#ifdef WIN32
			_sleep(1000);
#else
//			usleep(1000000);
			sleep(1);
#endif
			if (++nLoop == 600)
				nLoop = 0;
			if (nLoop % 5 == 0)
				Statistics();
			if (configRec.ulDiagIntv > 0) {
				if (nLoop % configRec.ulDiagIntv == 2)
					Diagnose();
//				if ( nLoop % configRec.ulDiagIntv == 5 ) DiagnoseAgent();
			}
		}
	} catch (...) {
		throw new CMTException(SYSERR_SOCKACCEPTFAILURE,
				"Exception occurs in Diagnosis thread.");
	}
}
void CBREXDiag::Statistics(void) {
	int rc;
	char msg[200];
	if (!g_Called)
		return;
	if (configRec.usStatFlag == 0)
		return;
	g_Called = 0;
	DB_Lock();
	rc = ConnectLoadDatabase(msg);
	if (rc == 0) {
		rc = pCMRGblVars->SaveStatistics(msg);
		DisConnectLoadDatabase();
	}
	DB_Unlock();
	if (rc != 0) {
		printf("SaveStatistics Error (%d) %s\n", rc, msg);
	}
}
void DiagnoseEngine();
void CBREXDiag::Diagnose(void) {
	printf("DiagnoseEngine.\n");
	DiagnoseEngine();
}
/*
 void	DiagnoseDbAgent();
 void   CBREXDiag::DiagnoseAgent( void )
 {
 DiagnoseDbAgent();
 }
 */
